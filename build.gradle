plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.lineinc'
version = '0.0.1-SNAPSHOT'

// 의존성 버전 관리
ext {
    springdocVersion = '2.8.0'
    querydslVersion  = '5.1.0'
    poiVersion       = '5.2.5'
    awsSdkVersion    = '2.26.11'
    bucket4jVersion  = '7.3.0'
    javersVersion    = '7.4.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Spring Boot 스타터들
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // 데이터베이스 및 세션 관리
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.springframework.session:spring-session-jdbc'

    // 개발 도구
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // API 문서화
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // QueryDSL
    implementation      "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

    // 파일 처리
    implementation "org.apache.poi:poi-ooxml:${poiVersion}"

    // 외부 서비스
    implementation "software.amazon.awssdk:s3:${awsSdkVersion}"

    // 유틸리티
    implementation "com.github.vladimir-bukhtoyarov:bucket4j-core:${bucket4jVersion}"
    implementation "org.javers:javers-spring-boot-starter-sql:${javersVersion}"
}

sourceSets {
    main {
        java {
            // QueryDSL이 생성한 소스 코드 포함
            srcDirs += 'build/generated/querydsl'
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    // QueryDSL을 위한 생성된 소스 출력 디렉토리 설정
    options.generatedSourceOutputDirectory.set(file("build/generated/querydsl"))
    options.compilerArgs += ['-parameters']
    options.encoding = 'UTF-8'
}

// 일반 JAR 생성을 비활성화하고, Spring Boot 실행용 JAR만 생성
tasks.named('jar') {
    enabled = false
}