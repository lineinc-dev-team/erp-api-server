name: Deploy Dev to EC2

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: ✅ 코드 체크아웃
        uses: actions/checkout@v4

      - name: ☕ Java 24 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: 🔁 Gradle 캐시 복원
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle-wrapper.properties', '**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧱 Gradle로 JAR 빌드
        run: ./gradlew bootJar --no-daemon --parallel -x test

      - name: 🔐 SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📦 JAR 파일 EC2로 전송
        run: rsync -avz --progress build/libs/*.jar ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }}:/home/ubuntu/app-new.jar

      - name: 🚀 EC2 무중단 배포
        run: |
          ssh ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }} bash -s << 'EOF'
            set -euo pipefail
            
            echo "🚀 무중단 배포 시작"
            
            # JAR 파일 교체
            mv /home/ubuntu/app-new.jar /home/ubuntu/app-latest.jar
            
            # 현재 포트 확인 및 새 포트 결정
            if [ -f "/etc/nginx/sites-available/erp.conf" ]; then
              CURRENT_PORT=$(sudo grep -oP 'proxy_pass http://127.0.0.1:\K[0-9]+' /etc/nginx/sites-available/erp.conf | head -n 1 || echo "8080")
            else
              echo "⚠️ erp.conf 파일이 없습니다. 기본 포트 8080 사용"
              CURRENT_PORT="8080"
            fi
            
            NEW_PORT=$([ "$CURRENT_PORT" = "8080" ] && echo "8081" || echo "8080")
            NEW_APP="app-${NEW_PORT}"
            OLD_APP="app-$([ "$NEW_PORT" = "8080" ] && echo "8081" || echo "8080")"
            
            echo "▶ 포트 전환: $CURRENT_PORT → $NEW_PORT"
            echo "▶ 새 앱: $NEW_APP, 이전 앱: $OLD_APP"
            
            # 새 앱 시작
            pm2 start ecosystem.config.js --only "$NEW_APP"
            
            # 새 앱이 준비될 때까지 대기
            for i in {1..10}; do
              if ss -tlnp | grep -q ":$NEW_PORT " && curl -s --max-time 3 "http://localhost:${NEW_PORT}/actuator/health" | grep -q '"status":"UP"'; then
                echo "✅ 새 앱 준비 완료"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "❌ 새 앱 시작 실패"
                exit 1
              fi
              sleep 2
            done
            
            # Nginx 설정 백업
            sudo cp /etc/nginx/sites-available/erp.conf /etc/nginx/sites-available/erp.conf.backup
            
            # 새로운 Nginx 설정 생성
            cat > /tmp/nginx-upstream.conf << 'NGINX_EOF'
            upstream backend {
                server 127.0.0.1:NEW_PORT weight=100;
                server 127.0.0.1:CURRENT_PORT weight=0;
            }
            
            server {
                listen 80;
                server_name dev-erp-api.dooson.it;
                
                location = /actuator/health {
                    proxy_pass http://backend;
                    proxy_http_version 1.1;
                    proxy_connect_timeout 5s;
                    proxy_read_timeout 5s;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    add_header Cache-Control "no-cache, no-store, must-revalidate";
                }
                
                location / {
                    proxy_pass http://backend;
                    proxy_http_version 1.1;
                    proxy_connect_timeout 10s;
                    proxy_read_timeout 30s;
                    proxy_send_timeout 30s;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    add_header X-Frame-Options "SAMEORIGIN" always;
                    add_header X-Content-Type-Options "nosniff" always;
                }
                
                location ~ /\. { deny all; }
            }
            NGINX_EOF
            
            # 플레이스홀더 치환
            sed -i "s/NEW_PORT/$NEW_PORT/g" /tmp/nginx-upstream.conf
            sed -i "s/CURRENT_PORT/$CURRENT_PORT/g" /tmp/nginx-upstream.conf
            
            # Nginx 설정 적용
            sudo cp /tmp/nginx-upstream.conf /etc/nginx/sites-available/erp.conf
            sudo nginx -t && sudo nginx -s reload
            
            # 전환 확인
            if curl -s --max-time 3 "http://localhost/actuator/health" | grep -q '"status":"UP"'; then
              echo "✅ 새 앱으로 전환 완료"
              
              # 이전 앱 정리
              pm2 delete "$OLD_APP" 2>/dev/null || true
              pm2 save --force
              
              echo "✅ 무중단 배포 완료"
            else
              echo "❌ 새 앱 전환 실패, 롤백"
              sudo cp /etc/nginx/sites-available/erp.conf.backup /etc/nginx/sites-available/erp.conf
              sudo nginx -s reload
              pm2 delete "$NEW_APP" 2>/dev/null || true
              exit 1
            fi
          EOF