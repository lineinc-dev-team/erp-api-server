name: Deploy Dev to EC2

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: ✅ 코드 체크아웃
        uses: actions/checkout@v4

      - name: ☕ Java 24 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: 🔁 Gradle 캐시 복원
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle-wrapper.properties', '**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧱 Gradle로 JAR 빌드 (최적화)
        run: |
          ./gradlew bootJar \
            --no-daemon \
            --parallel \
            --max-workers=4 \
            --build-cache \
            --configure-on-demand \
            -x test \
            -x check

      - name: 🔐 SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📦 JAR 파일 EC2로 전송 (최적화)
        run: |
          # JAR 파일 압축 (전송 속도 향상)
          gzip -c build/libs/*.jar > app-new.jar.gz
          
          # 압축된 파일 전송
          rsync -avz --progress \
            --compress-level=9 \
            --partial \
            --inplace \
            app-new.jar.gz \
            ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }}:/home/ubuntu/
          
          # 실서버에서 압축 해제
          ssh ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }} \
            "gunzip -f /home/ubuntu/app-new.jar.gz"

      - name: 🚀 EC2 간단 무중단 배포
        run: |
          ssh ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }} bash -s << 'EOF'
            set -euo pipefail
            
            # 배포 시작 시간 측정
            DEPLOY_START_TIME=$(date +%s)
            
            echo "🚀 간단 무중단 배포 시작"
            
            # JAR 파일 교체
            mv /home/ubuntu/app-new.jar /home/ubuntu/app-latest.jar
            
            # JAR 파일 존재 확인
            if [ ! -f "/home/ubuntu/app-latest.jar" ]; then
              echo "❌ JAR 파일이 없습니다: /home/ubuntu/app-latest.jar"
              exit 1
            fi
            echo "✅ JAR 파일 준비 완료: /home/ubuntu/app-latest.jar"
            
            # 현재 활성 포트 확인 (weight=100인 포트)
            CURRENT_PORT=$(sudo grep "weight=100" /etc/nginx/sites-available/erp.conf | grep -oP '127.0.0.1:\K[0-9]+' | head -n 1)
            
            # 디버깅을 위한 현재 상태 출력
            echo "▶ 현재 Nginx upstream 상태:"
            sudo grep "server 127.0.0.1:" /etc/nginx/sites-available/erp.conf
            
            # 포트 전환 로직 수정
            if [ "$CURRENT_PORT" = "8080" ]; then
              NEW_PORT="8081"
            elif [ "$CURRENT_PORT" = "8081" ]; then
              NEW_PORT="8080"
            else
              echo "❌ 현재 활성 포트를 확인할 수 없습니다: $CURRENT_PORT"
              echo "▶ 기본값으로 8081로 전환"
              NEW_PORT="8081"
              CURRENT_PORT="8080"
            fi
            
            NEW_APP="app-${NEW_PORT}"
            OLD_APP="app-${CURRENT_PORT}"
            
            echo "▶ 포트 전환: $CURRENT_PORT (weight=100) → $NEW_PORT (weight=100)"
            echo "▶ 새 앱: $NEW_APP, 이전 앱: $OLD_APP"
            
            # 새 앱 시작/재시작
            if pm2 list | grep -q "$NEW_APP"; then
              echo "▶ 기존 $NEW_APP 프로세스 재시작 (새 JAR 적용)"
              pm2 restart "$NEW_APP"
            else
              echo "▶ 새 $NEW_APP 프로세스 시작"
              pm2 start ecosystem.config.js --only "$NEW_APP"
            fi
            
            # 새 앱 준비 대기
            echo "▶ 새 앱 준비 대기 (포트: $NEW_PORT)"
            
            # 1단계: 포트 열림 확인 (빠른 확인)
            echo "▶ 1단계: 포트 열림 확인..."
            PORT_READY_TIME=0
            for i in {1..10}; do  # 15 → 10 (더 빠른 확인)
              echo "▶ 포트 확인 시도 $i/10..."
              
              # 현재 열린 포트 목록 출력
              echo "▶ 현재 열린 포트 목록:"
              ss -tlnp | grep LISTEN || echo "열린 포트 없음"
              
              # 특정 포트 상태 확인
              if ss -tlnp | grep -q ":$NEW_PORT[[:space:]]"; then
                echo "✅ 포트 $NEW_PORT에서 프로세스 확인됨"
                echo "▶ 포트 $NEW_PORT 상세 정보:"
                ss -tlnp | grep ":$NEW_PORT[[:space:]]"
                PORT_READY_TIME=$((i * 1))
                break
              else
                echo "⚠️ 포트 $NEW_PORT에서 프로세스 없음"
              fi
              
              if [ $i -eq 10 ]; then
                echo "❌ 포트 $NEW_PORT에서 프로세스가 열리지 않음"
                echo "▶ PM2 상태:"
                pm2 list
                echo "▶ PM2 로그 (마지막 20줄):"
                pm2 logs "$NEW_APP" --lines 20
                exit 1
              fi
              
              sleep 1  # 3초 → 1초 (더 빠른 반응)
            done
            
            # 2단계: Spring Boot 완전 시작 대기 (최적화)
            echo "▶ 2단계: Spring Boot 완전 시작 대기..."
            HEALTH_CHECK_TIME=0
            for i in {1..15}; do  # 20 → 15 (적절한 대기)
              echo "▶ 헬스체크 시도 $i/15..."
              
              if curl -s --max-time 5 "http://localhost:${NEW_PORT}/actuator/health" | grep -q '"status":"UP"'; then
                echo "✅ 새 앱 준비 완료 (헬스체크 성공)"
                HEALTH_CHECK_TIME=$((i * 2))
                break
              fi
              
              if [ $i -eq 15 ]; then
                echo "❌ 새 앱 시작 실패 (헬스체크 타임아웃)"
                echo "▶ PM2 상태:"
                pm2 list
                echo "▶ PM2 로그 (마지막 20줄):"
                pm2 logs "$NEW_APP" --lines 20
                echo "▶ 포트 상태:"
                ss -tlnp | grep ":$NEW_PORT " || echo "포트 $NEW_PORT에서 프로세스 없음"
                exit 1
              fi
              
              sleep 2  # 3초 → 2초 (적절한 간격)
            done
            
            # 진짜 무중단 전환: Nginx weight만 변경 (프로세스 종료 없음)
            echo "▶ 진짜 무중단 전환: Nginx weight만 변경"
            sudo sed -i "s/server 127.0.0.1:$CURRENT_PORT.*weight=100/server 127.0.0.1:$CURRENT_PORT weight=0/" /etc/nginx/sites-available/erp.conf
            sudo sed -i "s/server 127.0.0.1:$NEW_PORT.*weight=0/server 127.0.0.1:$NEW_PORT weight=100/" /etc/nginx/sites-available/erp.conf
            
            # Nginx reload (설정 변경만)
            sudo nginx -t && sudo nginx -s reload
            echo "✅ Nginx upstream 전환 완료 (Bad Gateway 0초!)"
            
            # 전환 확인
            sleep 2
            if curl -s --max-time 5 "http://localhost/actuator/health" | grep -q '"status":"UP"'; then
              echo "✅ 새 앱으로 전환 완료"
              
              # 이전 앱도 새 JAR로 업데이트 (프로세스는 유지)
              echo "▶ 이전 앱 $OLD_APP도 새 JAR로 업데이트"
              pm2 restart "$OLD_APP"
              
              # PM2 상태 저장
              pm2 save --force
              
              # 성능 메트릭 출력
              echo "🎯 배포 성능 메트릭:"
              echo "▶ JAR 파일 크기: $(ls -lh /home/ubuntu/app-latest.jar | awk '{print $5}')"
              echo "▶ 포트 열림 시간: ${PORT_READY_TIME}s"
              echo "▶ 헬스체크 시간: ${HEALTH_CHECK_TIME}s"
              echo "▶ 총 배포 시간: $(( $(date +%s) - DEPLOY_START_TIME ))s"
              
              echo "✅ 진짜 무중단 배포 완료! (Bad Gateway 0초)"
            else
              echo "❌ 전환 실패, 롤백"
              # weight 롤백
              sudo sed -i "s/server 127.0.0.1:$CURRENT_PORT.*weight=0/server 127.0.0.1:$CURRENT_PORT weight=100/" /etc/nginx/sites-available/erp.conf
              sudo sed -i "s/server 127.0.0.1:$NEW_PORT.*weight=100/server 127.0.0.1:$NEW_PORT weight=0/" /etc/nginx/sites-available/erp.conf
              sudo nginx -s reload
              echo "✅ 롤백 완료 (이전 앱으로 복구)"
              exit 1
            fi
          EOF