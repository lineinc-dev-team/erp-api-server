name: Deploy Dev to EC2

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: ✅ 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🔁 Gradle 캐시 복원
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle-wrapper.properties', '**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧱 Gradle로 JAR 빌드
        run: ./gradlew bootJar --no-daemon --parallel -x test

      - name: 🔐 SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📦 JAR 파일 EC2로 전송
        run: rsync -avz --progress build/libs/*.jar ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }}:/home/ubuntu/app-new.jar

      - name: 🔧 JAR 파일 권한 및 소유자 설정
        run: ssh ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }} "chmod 644 /home/ubuntu/app-new.jar"

      - name: 🚀 EC2에서 무중단 배포
        run: |
          ssh ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }} << 'EOF'
            # 포트 8081 정리 및 완전 종료 대기
            pkill -f "server.port=8081" 2>/dev/null || true
            for i in {1..6}; do
              if ! lsof -i:8081 >/dev/null; then
                break
              fi
              sleep 2
            done

            # 새 JAR를 임시 위치로 복사 (안전한 작업)
            cp /home/ubuntu/app-new.jar /tmp/app-new.jar

            # 새 애플리케이션을 pm2 ecosystem으로 포트 8081에서 시작
            pm2 delete app-new 2>/dev/null || true
            pm2 start ecosystem.config.js --only app-new

            # pm2가 app-new를 온라인 상태로 만들 때까지 최대 30초 대기 (6회, 5초 간격)
            for i in {1..6}; do
              if pm2 list | grep -q "app-new.*online"; then
                break
              fi
              sleep 5
            done

            # app-new가 온라인 상태가 아니면 실패 처리
            if ! pm2 list | grep -q "app-new.*online"; then
              echo "애플리케이션 시작 실패"
              pm2 logs app-new --lines 50
              pm2 delete app-new 2>/dev/null || true
              exit 1
            fi

            # 헬스 체크 1회 성공 조건 (포트 8081, 최대 60초)
            HEALTH_CHECK_SUCCESS=false
            for i in {1..12}; do
              if curl -f http://localhost:8081/actuator/health > /dev/null 2>&1; then
                HEALTH_CHECK_SUCCESS=true
                break
              fi
              sleep 5
            done

            if [ "$HEALTH_CHECK_SUCCESS" = false ]; then
              echo "헬스체크 실패 - 로그 확인:"
              pm2 logs app-new --lines 50
              pm2 delete app-new 2>/dev/null || true
              exit 1
            else
              echo "✅ app-new 헬스체크 통과 → 기존 app 교체 시작"
              mv /home/ubuntu/app-new.jar /home/ubuntu/app-latest.jar

              # 기존 app을 무중단 재시작 (reload)
              pm2 reload app

              # 기존 app-new 종료
              pm2 delete app-new 2>/dev/null || true
            fi

            # 최종 헬스 체크 1회 성공 (포트 8080, 최대 60초)
            for i in {1..12}; do
              if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
                exit 0
              fi
              sleep 5
            done

            echo "최종 헬스체크 실패"
            pm2 logs app --lines 50
            exit 1
          EOF