name: Deploy Dev to EC2

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: ✅ 코드 체크아웃
        uses: actions/checkout@v4

      - name: ☕ Java 24 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: 🔁 Gradle 캐시 복원
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle-wrapper.properties', '**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧱 Gradle로 JAR 빌드
        run: ./gradlew bootJar --no-daemon --parallel -x test

      - name: 🔐 SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📦 JAR 파일 EC2로 전송
        run: rsync -avz --progress build/libs/*.jar ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }}:/home/ubuntu/app-new.jar

      - name: 🚀 EC2 무중단 배포
        run: |
          ssh ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }} bash -s << 'EOF'
            set -euo pipefail
            
            # 롤백 함수
            rollback() {
              echo "🔄 롤백 시작"
              
              # 백업 파일 존재 여부 확인
              if [ -f "/etc/nginx/sites-available/erp.conf.backup" ]; then
                sudo cp /etc/nginx/sites-available/erp.conf.backup /etc/nginx/sites-available/erp.conf
                echo "✅ Nginx 설정 롤백 완료"
              else
                echo "⚠️ 백업 파일이 없습니다. 수동 복구가 필요합니다."
                # 최소한의 안전한 설정으로 복구
                sudo systemctl stop nginx
              fi
              
              # 새 앱 프로세스 정리
              if [ -n "${NEW_APP:-}" ]; then
                pm2 delete "$NEW_APP" 2>/dev/null || true
                echo "✅ 새 앱 프로세스 정리 완료"
              fi
              
              echo "✅ 롤백 완료"
              exit 1
            }
            
            trap rollback ERR
            
            echo "🚀 무중단 배포 시작"
            
            # JAR 파일 교체
            mv /home/ubuntu/app-new.jar /home/ubuntu/app-latest.jar
            
            # 현재 포트 확인 및 새 포트 결정
            CURRENT_PORT=$(sudo grep -oP 'proxy_pass http://127.0.0.1:\K[0-9]+' /etc/nginx/sites-available/erp.conf | head -n 1 || echo "8080")
            NEW_PORT=$([ "$CURRENT_PORT" = "8080" ] && echo "8081" || echo "8080")
            NEW_APP="app-${NEW_PORT}"    # app-8080 또는 app-8081
            OLD_APP="app-$([ "$NEW_PORT" = "8080" ] && echo "8081" || echo "8080")"    # 반대 포트의 앱
            
            echo "▶ 포트 전환: $CURRENT_PORT → $NEW_PORT"
            echo "▶ 새 앱: $NEW_APP, 이전 앱: $OLD_APP"
            
            # 새 앱 시작 (백그라운드)
            pm2 start ecosystem.config.js --only "$NEW_APP"
            
            # 빠른 헬스체크 (5초 대기)
            sleep 5
            
            # 포트 및 헬스체크 (더 빠르게)
            for i in {1..10}; do
              if ss -tlnp | grep -q ":$NEW_PORT " && curl -s --max-time 5 "http://localhost:${NEW_PORT}/actuator/health" | grep -q '"status":"UP"'; then
                echo "✅ 새 앱 준비 완료"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "❌ 새 앱 시작 실패"
                exit 1
              fi
              sleep 2
            done
            
            # Nginx 프록시 전환 (백업 후 수정)
            echo "▶ Nginx 프록시 전환 시작"
            sudo cp /etc/nginx/sites-available/erp.conf /etc/nginx/sites-available/erp.conf.backup
            
            # 백업 파일 검증
            if [ ! -f "/etc/nginx/sites-available/erp.conf.backup" ]; then
              echo "❌ 백업 파일 생성 실패"
              exit 1
            fi
            
            sudo sed -i "s/proxy_pass http:\/\/127.0.0.1:[0-9]\+/proxy_pass http:\/\/127.0.0.1:${NEW_PORT}/g" /etc/nginx/sites-available/erp.conf
            
            # Nginx 설정 테스트 후 graceful reload (중단 없음)
            sudo nginx -t && sudo nginx -s reload
            
            # 빠른 외부 헬스체크
            for i in {1..5}; do
              if curl -s --max-time 5 "http://localhost/actuator/health" | grep -q '"status":"UP"'; then
                echo "✅ 외부 접근 확인"
                break
              fi
              sleep 1
            done
            
            # 이전 앱 종료
            pm2 delete "$OLD_APP" 2>/dev/null || true
            pm2 save --force
            trap - ERR
            
            echo "✅ 무중단 배포 완료"
            echo "🎉 새 앱 $NEW_APP이 포트 $NEW_PORT에서 정상 실행 중입니다"
          EOF