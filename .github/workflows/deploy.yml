name: Deploy Dev to EC2

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: ✅ 코드 체크아웃
        uses: actions/checkout@v4

      - name: ☕ Java 24 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: 🔁 Gradle 캐시 복원
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle-wrapper.properties', '**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧱 Gradle로 JAR 빌드
        run: ./gradlew bootJar --no-daemon --parallel -x test

      - name: 🔐 SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📦 JAR 파일 EC2로 전송
        run: rsync -avz --progress build/libs/*.jar ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }}:/home/ubuntu/app-new.jar

      - name: 🚀 EC2 무중단 배포
        run: |
          ssh ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }} bash -s << 'EOF'
            set -euo pipefail
            
            # ===== 상수 정의 =====
            readonly MAX_HEALTH_CHECK_ATTEMPTS=10
            readonly HEALTH_CHECK_TIMEOUT=3
            readonly HEALTH_CHECK_INTERVAL=1
            readonly NGINX_RELOAD_WAIT=1
            
            # ===== 유틸리티 함수 =====
            log() { echo "▶ $1"; }
            success() { echo "✅ $1"; }
            error() { echo "❌ $1"; }
            warning() { echo "⚠️ $1"; }
            
            # ===== 롤백 함수 =====
            rollback() {
              warning "롤백 시작"
              
              if [ -f "/etc/nginx/sites-available/erp.conf.backup" ]; then
                sudo cp /etc/nginx/sites-available/erp.conf.backup /etc/nginx/sites-available/erp.conf
                success "Nginx 설정 롤백 완료"
              else
                warning "백업 파일이 없습니다. 수동 복구가 필요합니다."
                sudo systemctl stop nginx
              fi
              
              if [ -n "${NEW_APP:-}" ]; then
                pm2 delete "$NEW_APP" 2>/dev/null || true
                success "새 앱 프로세스 정리 완료"
              fi
              
              success "롤백 완료"
              exit 1
            }
            
            # ===== 헬스체크 함수 =====
            wait_for_app_ready() {
              local port=$1
              local app_name=$2
              
              log "앱 $app_name 헬스체크 시작 (포트: $port)"
              
              for i in $(seq 1 $MAX_HEALTH_CHECK_ATTEMPTS); do
                if ss -tlnp | grep -q ":$port " && \
                   curl -s --max-time $HEALTH_CHECK_TIMEOUT "http://localhost:$port/actuator/health" | grep -q '"status":"UP"'; then
                  success "앱 $app_name 준비 완료 (${i}초)"
                  return 0
                fi
                
                if [ $i -eq $MAX_HEALTH_CHECK_ATTEMPTS ]; then
                  error "앱 $app_name 시작 실패"
                  return 1
                fi
                
                sleep $HEALTH_CHECK_INTERVAL
              done
            }
            
            # ===== Nginx 설정 생성 함수 =====
            create_nginx_config() {
              local new_port=$1
              local current_port=$2
              
              log "Nginx 설정 생성 (새 포트: $new_port, 현재 포트: $current_port)"
              
              # echo 명령어로 설정 파일 생성 (here document 문제 해결)
              cat > /tmp/nginx-fast.conf << 'EOF'
            upstream backend {
                server 127.0.0.1:NEW_PORT weight=100;
                server 127.0.0.1:CURRENT_PORT weight=0;
            }
            
            server {
                listen 80;
                server_name dev-erp-api.dooson.it;
                
                location = /actuator/health {
                    proxy_pass http://backend;
                    proxy_http_version 1.1;
                    proxy_connect_timeout 5s;
                    proxy_read_timeout 5s;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    add_header Cache-Control "no-cache, no-store, must-revalidate";
                }
                
                location / {
                    proxy_pass http://backend;
                    proxy_http_version 1.1;
                    proxy_connect_timeout 10s;
                    proxy_read_timeout 30s;
                    proxy_send_timeout 30s;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    add_header X-Frame-Options "SAMEORIGIN" always;
                    add_header X-Content-Type-Options "nosniff" always;
                }
                
                location ~ /\. { deny all; }
            }
            EOF
              
              # 플레이스홀더를 실제 값으로 치환
              sed -i "s/NEW_PORT/$new_port/g" /tmp/nginx-fast.conf
              sed -i "s/CURRENT_PORT/$current_port/g" /tmp/nginx-fast.conf
            }
            
            # ===== 메인 배포 로직 =====
            main() {
              trap rollback ERR
              
              log "무중단 배포 시작"
              
              # JAR 파일 교체
              mv /home/ubuntu/app-new.jar /home/ubuntu/app-latest.jar
              
              # 포트 결정
              local current_port=$(sudo grep -oP 'proxy_pass http://127.0.0.1:\K[0-9]+' /etc/nginx/sites-available/erp.conf | head -n 1 || echo "8080")
              local new_port=$([ "$current_port" = "8080" ] && echo "8081" || echo "8080")
              local new_app="app-${new_port}"
              local old_app="app-$([ "$new_port" = "8080" ] && echo "8081" || echo "8080")"
              
              log "포트 전환: $current_port → $new_port"
              log "새 앱: $new_app, 이전 앱: $old_app"
              
              # 새 앱 시작
              pm2 start ecosystem.config.js --only "$new_app"
              
              # 헬스체크
              wait_for_app_ready "$new_port" "$new_app" || exit 1
              
              # Nginx 설정 백업 및 변경
              sudo cp /etc/nginx/sites-available/erp.conf /etc/nginx/sites-available/erp.conf.backup
              create_nginx_config "$new_port" "$current_port"
              sudo cp /tmp/nginx-fast.conf /etc/nginx/sites-available/erp.conf
              
              # Nginx reload
              sudo nginx -t && sudo nginx -s reload
              sleep $NGINX_RELOAD_WAIT
              
              # 전환 확인
              if curl -s --max-time $HEALTH_CHECK_TIMEOUT "http://localhost/actuator/health" | grep -q '"status":"UP"'; then
                success "새 앱으로 전환 완료"
                
                # 이전 앱 정리
                pm2 delete "$old_app" 2>/dev/null || true
                pm2 save --force
                
                success "무중단 배포 완료"
                trap - ERR
              else
                error "새 앱 전환 실패, 롤백"
                rollback
              fi
            }
            
            # ===== 실행 =====
            main
          EOF