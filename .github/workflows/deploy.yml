name: Deploy Dev to EC2

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: ✅ 코드 체크아웃
        uses: actions/checkout@v4

      - name: ☕ Java 24 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '24'

      - name: 🔁 Gradle 캐시 복원
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle-wrapper.properties', '**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧱 Gradle로 JAR 빌드 (테스트 생략)
        run: ./gradlew bootJar --no-daemon --parallel -x test

      - name: 🔐 SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📦 JAR 파일 EC2로 전송
        run: |
          rsync -az build/libs/*.jar ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }}:/home/ubuntu/app-new.jar

      - name: 🚀 EC2 무중단 배포
        run: |
          ssh ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }} bash -s << 'EOF'
            set -euo pipefail

            echo "🚀 무중단 배포 시작"

            # JAR 교체
            mv /home/ubuntu/app-new.jar /home/ubuntu/app-latest.jar
            [ -f "/home/ubuntu/app-latest.jar" ] || { echo "❌ JAR 없음"; exit 1; }

            # 새/이전 포트 결정
            if ss -tlnp | grep -q ":8080[[:space:]]"; then
              NEW_PORT=8081; OLD_PORT=8080
            else
              NEW_PORT=8080; OLD_PORT=8081
            fi

            NEW_APP="app-${NEW_PORT}"
            OLD_APP="app-${OLD_PORT}"
            echo "▶ 새 포트: $NEW_PORT, 이전 포트: $OLD_PORT"

            # 새 앱 시작
            if pm2 list | grep -q "$NEW_APP"; then
              pm2 restart "$NEW_APP"
            else
              pm2 start ecosystem.config.js --only "$NEW_APP"
            fi

            # 포트 오픈 대기 (최대 30초)
            for i in {1..10}; do
              if ss -tlnp | grep -q ":$NEW_PORT[[:space:]]"; then
                echo "✅ 포트 $NEW_PORT 열림"; break
              fi
              sleep 3
              [ $i -eq 10 ] && { echo "❌ 포트 열림 실패"; pm2 logs "$NEW_APP" --lines 10; exit 1; }
            done

            # 헬스체크 대기 (최대 30초)
            for i in {1..10}; do
              if curl -s --max-time 3 "http://localhost:${NEW_PORT}/actuator/health" | grep -q '"status":"UP"'; then
                echo "✅ 새 앱 준비 완료"; break
              fi
              sleep 3
              [ $i -eq 10 ] && { echo "❌ 헬스체크 실패"; pm2 logs "$NEW_APP" --lines 10; exit 1; }
            done

            # 이전 앱 종료
            pm2 delete "$OLD_APP" 2>/dev/null || true

            # 상태 저장
            pm2 save --force
            echo "✅ 무중단 배포 완료"
          EOF