name: Deploy Dev to EC2

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: ✅ 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🔁 Gradle 캐시 복원
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle-wrapper.properties', '**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧱 Gradle로 JAR 빌드
        run: ./gradlew bootJar --no-daemon --parallel -x test

      - name: 🔐 SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📦 JAR 파일 EC2로 전송
        run: rsync -avz --progress build/libs/*.jar ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }}:/home/ubuntu/app-new.jar

      - name: 🔧 JAR 파일 권한 설정
        run: ssh ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }} "chmod 644 /home/ubuntu/app-new.jar"

      - name: 🚀 EC2 무중단 배포 및 Nginx 포트 스위칭
        run: |
          ssh ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }} bash -s << 'EOF'
            set -euo pipefail

            APP_NEW_JAR="/home/ubuntu/app-new.jar"
            APP_LATEST_JAR="/home/ubuntu/app-latest.jar"
            PM2_APP_NAME_NEW="app-new"
            PM2_APP_NAME_OLD="app"
            NGINX_CONF="/etc/nginx/sites-available/erp.conf"
            PORT_1=8080
            PORT_2=8081

            function wait_for_pm2_online() {
              local app_name=$1
              local retries=6
              local wait_sec=5
              for i in $(seq 1 $retries); do
                if pm2 list | grep -q "${app_name}.*online"; then
                  return 0
                fi
                sleep $wait_sec
              done
              return 1
            }

            function health_check() {
              local port=$1
              local retries=12
              local wait_sec=5
              for i in $(seq 1 $retries); do
                if curl -sf "http://localhost:${port}/actuator/health" > /dev/null; then
                  return 0
                fi
                sleep $wait_sec
              done
              return 1
            }

            echo "▶ 새 JAR를 임시 위치로 복사"
            cp "$APP_NEW_JAR" /tmp/app-new.jar

            CURRENT_PORT=$(sudo grep -oP 'proxy_pass http://127.0.0.1:\K[0-9]+' "$NGINX_CONF" 2>/dev/null || echo "$PORT_1")
            if [ "$CURRENT_PORT" == "$PORT_1" ]; then
              NEW_PORT=$PORT_2
              OLD_APP=$PM2_APP_NAME_OLD
              NEW_APP=$PM2_APP_NAME_NEW
            else
              NEW_PORT=$PORT_1
              OLD_APP=$PM2_APP_NAME_NEW
              NEW_APP=$PM2_APP_NAME_OLD
            fi

            echo "▶ 현재 Nginx 프록시 포트: $CURRENT_PORT, 변경할 포트: $NEW_PORT"

            echo "▶ 새 애플리케이션($NEW_APP)을 포트 $NEW_PORT에서 pm2로 시작"
            pm2 start ecosystem.config.js --only "$NEW_APP"

            echo "▶ pm2 온라인 상태 대기..."
            if ! wait_for_pm2_online "$NEW_APP"; then
              echo "❌ $NEW_APP pm2 온라인 상태 진입 실패"
              pm2 logs "$NEW_APP" --lines 50
              pm2 delete "$NEW_APP" 2>/dev/null || true
              exit 1
            fi

            echo "▶ 헬스 체크 포트 $NEW_PORT 시작"
            if ! health_check $NEW_PORT; then
              echo "❌ 헬스체크 실패 (포트 $NEW_PORT)"
              pm2 logs "$NEW_APP" --lines 50
              pm2 delete "$NEW_APP" 2>/dev/null || true
              exit 1
            fi

            echo "✅ $NEW_APP 헬스체크 통과, Nginx 프록시 포트 전환 시작"

            sudo sed -i "s/proxy_pass http:\/\/127.0.0.1:[0-9]\+/proxy_pass http:\/\/127.0.0.1:${NEW_PORT}/" "$NGINX_CONF"
            sudo nginx -s reload
            echo "▶ Nginx 리로드 완료"

            echo "▶ 최신 JAR로 교체"
            mv "$APP_NEW_JAR" "$APP_LATEST_JAR"

            echo "▶ 이전 앱($OLD_APP) 종료"
            pm2 delete "$OLD_APP" 2>/dev/null || true

            echo "▶ 최종 헬스 체크 포트 $NEW_PORT"
            if ! health_check $NEW_PORT; then
              echo "❌ 최종 헬스체크 실패 (포트 $NEW_PORT)"
              pm2 logs "$NEW_APP" --lines 50
              exit 1
            fi

            echo "✅ 무중단 배포 완료"
            exit 0
          EOF