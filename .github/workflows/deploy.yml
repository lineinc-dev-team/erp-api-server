name: Deploy Dev to EC2

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: ✅ 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🔁 Gradle 캐시 복원
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            build/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/*.gradle.kts', '**/gradle-wrapper.properties', '**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧱 Gradle로 JAR 빌드
        run: ./gradlew bootJar --no-daemon --parallel -x test

      - name: 🔐 SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEV_EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📦 JAR 파일 EC2로 전송
        run: rsync -avz --progress build/libs/*.jar ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }}:/home/ubuntu/app-new.jar

      - name: 🚀 EC2 무중단 배포
        run: |
          ssh ${{ secrets.DEV_EC2_USER }}@${{ secrets.DEV_EC2_HOST }} bash -s << 'EOF'
            set -euo pipefail

            echo "🚀 무중단 배포 시작"
            
            # 변수 설정
            APP_NEW_JAR="/home/ubuntu/app-new.jar"
            APP_LATEST_JAR="/home/ubuntu/app-latest.jar"
            PORT_1=8080
            PORT_2=8081
            
            # 새 JAR를 최신 JAR로 교체
            mv "$APP_NEW_JAR" "$APP_LATEST_JAR"
            
            # 현재 실행 중인 포트 확인
            CURRENT_PORT=$(sudo grep -oP 'proxy_pass http://127.0.0.1:\K[0-9]+' /etc/nginx/sites-available/erp.conf | head -n 1 || echo "$PORT_1")
            
            # 새 포트 결정
            if [ "$CURRENT_PORT" = "$PORT_1" ]; then
              NEW_PORT=$PORT_2
              OLD_APP="app"
              NEW_APP="app-new"
            else
              NEW_PORT=$PORT_1
              OLD_APP="app-new"
              NEW_APP="app"
            fi
            
            echo "▶ 현재 포트: $CURRENT_PORT, 새 포트: $NEW_PORT"
            
            # 기존 app-new 프로세스 정리
            pm2 delete "app-new" 2>/dev/null || true
            
            # 새 앱 시작
            pm2 start ecosystem.config.js --only "$NEW_APP"
            
            # 앱 시작 대기
            echo "▶ 앱 시작 대기 (30초)"
            sleep 30
            
            # 포트 확인
            echo "▶ 포트 $NEW_PORT 리스닝 확인"
            for i in {1..20}; do
              if ss -tlnp | grep -q ":$NEW_PORT "; then
                echo "✅ 포트 $NEW_PORT 리스닝 확인됨"
                break
              fi
              if [ $i -eq 20 ]; then
                echo "❌ 포트 리스닝 실패"
                pm2 delete "$NEW_APP" 2>/dev/null || true
                exit 1
              fi
              sleep 2
            done
            
            # 추가 안정화 대기
            echo "▶ 추가 안정화 대기 (15초)"
            sleep 15
            
            # 헬스체크
            echo "▶ 헬스체크 시작"
            for i in {1..15}; do
              if curl -s --max-time 10 "http://localhost:${NEW_PORT}/actuator/health" | grep -q '"status":"UP"'; then
                echo "✅ 헬스체크 성공"
                break
              fi
              if [ $i -eq 15 ]; then
                echo "❌ 헬스체크 실패"
                pm2 delete "$NEW_APP" 2>/dev/null || true
                exit 1
              fi
              sleep 3
            done
            
            # 추가 안정화 대기 (헬스체크 후)
            echo "▶ 헬스체크 후 안정화 대기 (10초)"
            sleep 10
            
            # Nginx 프록시 전환 (백업 후 수정)
            echo "▶ Nginx 프록시 전환 시작"
            sudo cp /etc/nginx/sites-available/erp.conf /etc/nginx/sites-available/erp.conf.backup
            sudo sed -i "s/proxy_pass http:\/\/127.0.0.1:[0-9]\+/proxy_pass http:\/\/127.0.0.1:${NEW_PORT}/g" /etc/nginx/sites-available/erp.conf
            
            # Nginx 설정 테스트
            if ! sudo nginx -t; then
              echo "❌ Nginx 설정 오류, 백업에서 복원"
              sudo cp /etc/nginx/sites-available/erp.conf.backup /etc/nginx/sites-available/erp.conf
              exit 1
            fi
            
            # Nginx 재시작 (reload 대신)
            sudo systemctl restart nginx
            echo "✅ Nginx 프록시 전환 완료"
            
            # 프록시 전환 후 추가 대기
            echo "▶ 프록시 전환 후 안정화 대기 (5초)"
            sleep 5
            
            # 새 포트로 외부 헬스체크
            echo "▶ 외부 헬스체크 시작"
            for i in {1..10}; do
              if curl -s --max-time 10 "http://localhost/actuator/health" | grep -q '"status":"UP"'; then
                echo "✅ 외부 헬스체크 성공"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "❌ 외부 헬스체크 실패, 롤백 시작"
                sudo cp /etc/nginx/sites-available/erp.conf.backup /etc/nginx/sites-available/erp.conf
                sudo systemctl restart nginx
                pm2 delete "$NEW_APP" 2>/dev/null || true
                exit 1
              fi
              sleep 3
            done
            
            # 이전 앱 종료 (모든 검증 완료 후)
            echo "▶ 이전 앱 종료"
            pm2 delete "$OLD_APP" 2>/dev/null || true
            pm2 save --force
            
            echo "✅ 무중단 배포 완료"
          EOF